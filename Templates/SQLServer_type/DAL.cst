<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="ToolsCodeTemplate.cs" Inherits="ToolsCodeTemplate" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="DB" %>
<%@ Property Name="NameSpace" Type="System.String" Default="MyWeb.DAL" Category="String" %>
<%@ Property Name="NameSpaceModel" Type="System.String" Default="MyWeb.Model" Category="String" %>
<%@ Property Name="SqlHelper" Type="System.String" Default="SqlHelper" Category="String" %>
<%@ Property Name="SqlDapperHelper" Type="System.String" Default="SqlDapperHelper" Category="String" %>
<script runat="template">
    public override string GetFileName()
    {
    	return Table.Name + "DAL.cs";
    }
</script>
<% 
    string entity=Table.Name+"Table";
%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Utils;
using Dapper;
using <%=NameSpaceModel %>;

namespace <%=NameSpace %>
{
    <%PrintHeader("模板生成方法，对应"+Table.Name+"表基础增、删、改、查、等方法。"); %>
    
    /// <summary>
    /// 表名:<%=Table.Name %>
    /// 描述:<%=Table.Description %>
    /// 主键和自增:<%if(!Table.HasPrimaryKey) {%>无主键<%} %> <%if(!HasIdentity(Table)) {%>无自增字段<%} %>
    /// </summary>
    public partial class <%=Table.Name %>DAL
    {
        <%if(HasIdentity(Table)) {%>
        public <%=GetIdentityType(Table) %> Insert(<%=entity%> entity)
        {
            string sql = "INSERT INTO [<%=Table.Name%>] (<%=GetFields(Table) %>) VALUES (<%=GetValues(Table) %>);SELECT @@IDENTITY";
            return <%=SqlDapperHelper%>.ExecuteScalar<<%=GetIdentityType(Table) %>>(sql, entity);
        }
        
        public int InsertIdentity(<%=entity%> entity)
        {
            string sql = "SET IDENTITY_INSERT [<%=Table.Name%>] ON;INSERT INTO [<%=Table.Name%>] (<%=GetFields(Table, true) %>) VALUES (<%=GetValues(Table, true) %>);SET IDENTITY_INSERT [<%=Table.Name%>] OFF";
            return <%=SqlDapperHelper%>.Execute(sql, entity);
        }
        <%} else{%>
        public int Insert(<%=entity%> entity)
        {
            string sql = "INSERT INTO [<%=Table.Name%>] (<%=GetFields(Table) %>) VALUES (<%=GetValues(Table) %>)";
            return <%=SqlDapperHelper%>.Execute(sql, entity);
        }
        <%} %>
        
        public int UpdateAll(<%=entity%> entity, string updateFields = null)
        {
            if (updateFields == null)
            {
                updateFields = "<%=GetValuesEquals_NoPI(Table)%>";
            }
            else
            {
                updateFields = StringHelper.SqlUpdateFields(updateFields);
            }
            string sql = "UPDATE [<%=Table.Name%>] SET " + updateFields;
            return <%=SqlDapperHelper%>.Execute(sql, entity);
        }
        
        public int UpdateFieldsByWhere(<%=entity%> entity, string whereFields, string updateFields = null)
        {
            if (updateFields == null)
            {
                updateFields = "<%=GetValuesEquals_NoPI(Table)%>";
            }
            else
            {
                updateFields = StringHelper.SqlUpdateFields(updateFields);
            }
            string where = "WHERE " + StringHelper.SqlWhereFields(whereFields);
            string sql = string.Format("UPDATE [<%=Table.Name%>] SET {0} " + where, updateFields);
            return <%=SqlDapperHelper%>.Execute(sql, entity);
        }
        
        public int DeleteAll()
        {
            string sql = "DELETE FROM [<%=Table.Name%>]";
            return <%=SqlDapperHelper%>.Execute(sql);
        }
        
        <%if(Table.HasPrimaryKey) {%>
        public int DeleteById(<%=GetPKType(Table)%> <%=GetPKName(Table)%>)
        {
            string sql = "DELETE FROM [<%=Table.Name%>] WHERE [<%=GetPKName(Table)%>] = @<%=GetPKName(Table)%>";
            return <%=SqlDapperHelper%>.Execute(sql, new { <%=GetPKName(Table)%> = <%=GetPKName(Table)%> });
        }
        
        public int DeleteByIds(List<<%=GetPKType(Table)%>> ids)
        {
            if (ids.Count == 0) return 0;
            string sql = "DELETE FROM [<%=Table.Name%>] WHERE EXISTS(SELECT 1 FROM @table as t WHERE t.id=[<%=Table.Name%>].[<%=GetPKName(Table)%>])";
            return <%=SqlDapperHelper%>.Execute(sql, new { table = ids.AsTableValuedParameter("type_<%=GetPKType(Table)%>") });
        }
        <%} %>
        
        public IEnumerable<T> QueryAll<T>(string returnFields = null, int top = -1, string orderBy = null)
        {
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            if (orderBy != null)
            {
                orderBy = " ORDER BY " + orderBy;
            }
            string topN = null;
            if(top != -1)
            {
               topN = " TOP " + top + " "; 
            }
            string sql = "SELECT " + topN + returnFields + " FROM [<%=Table.Name%>]" + orderBy;
            return <%=SqlDapperHelper%>.Query<T>(sql);
        }
        
        <%if(Table.HasPrimaryKey) {%>
        public T QueryById<T>(<%=GetPKType(Table)%> <%=GetPKName(Table)%>, string returnFields = null)
        {
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            string sql = "SELECT " + returnFields + " FROM [<%=Table.Name%>] WHERE [<%=GetPKName(Table)%>] = @<%=GetPKName(Table)%>";
            return <%=SqlDapperHelper%>.Query<T>(sql, new { <%=GetPKName(Table)%> = <%=GetPKName(Table)%> }).FirstOrDefault();
        }
        
        public IEnumerable<T> QueryByIds<T>(List<<%=GetPKType(Table)%>> ids, string returnFields = null, string orderBy = null)
        {
            if (ids.Count == 0) return new List<T>();
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            if (orderBy != null)
            {
                orderBy = " ORDER BY " + orderBy;
            }
            string sql = "SELECT " + returnFields + " FROM [<%=Table.Name%>] WHERE EXISTS(SELECT 1 FROM @table as t WHERE t.id=[<%=Table.Name%>].[<%=GetPKName(Table)%>])" + orderBy;
            return <%=SqlDapperHelper%>.Query<T>(sql, new { table = ids.AsTableValuedParameter("type_<%=GetPKType(Table)%>") } );
        }
        <%} %>
        
        //PageInfo参数必须是dynamic par = new ExpandoObject();
        public void QueryByPage<T>(PageInfo<T> pageinfo)
        {
            if (pageinfo.ReturnFields == null)
            {
                pageinfo.ReturnFields = "<%=GetFields(Table, true)%>";
            }
            if (pageinfo.Where != null)
            {
                pageinfo.Where = "WHERE " + pageinfo.Where;
            }
            if (pageinfo.OrderBy != null)
            {
                pageinfo.OrderBy = "ORDER BY " + pageinfo.OrderBy;
            }
            else
            {
                <%if(Table.HasPrimaryKey) {%>
                pageinfo.OrderBy = "ORDER BY [<%=GetPKName(Table)%>] DESC";
                <%} else{%>
                pageinfo.OrderBy = "ORDER BY [<%=Table.Columns[0].Name%>]";
                <%} %>
            }

            string sqlData = null;
            if (pageinfo.Skip == 0)
            {
                sqlData = string.Format("SELECT TOP {0} {1} FROM [<%=Table.Name%>] {2} {3}", pageinfo.Take, pageinfo.ReturnFields, pageinfo.Where, pageinfo.OrderBy);
            }
            else
            {
                sqlData = string.Format("SELECT TOP {3} {0} FROM (SELECT ROW_NUMBER() OVER({1}) AS Num,{0} FROM [<%=Table.Name%>] {2}) AS [T] WHERE [T].[Num]>@skip", pageinfo.ReturnFields, pageinfo.OrderBy, pageinfo.Where, pageinfo.Take);
            }
            string sql = string.Format(@"
DECLARE @total BIGINT
SET @total=(SELECT COUNT(1) FROM [<%=Table.Name%>] {0})
SELECT @total
IF(@total!=0 AND @total>@skip)
	BEGIN
	  {1}
	END", pageinfo.Where, sqlData);

            using (var conn = <%=SqlDapperHelper%>.CreateConnection())
            {
                Dapper.SqlMapper.GridReader Reader = null;

                if (pageinfo.Params == null)
                {
                    Reader = conn.QueryMultiple(sql, new { skip = pageinfo.Skip });
                }
                else
                {
                    pageinfo.Params.skip = pageinfo.Skip;
                    Reader = conn.QueryMultiple(sql, (object)pageinfo.Params);
                }

                pageinfo.Total = Reader.Read<long>().FirstOrDefault();
                if (pageinfo.Total != 0 && pageinfo.Total > pageinfo.Skip)
                {
                    pageinfo.Data = Reader.Read<T>();
                }
                else
                {
                    pageinfo.Data = new List<T>();
                }
                Reader.Dispose();
            }

        }
        
        
        
    }
    
}